#!/bin/env python
import re
import sys
import argparse
from datetime import datetime
from Bio.SearchIO import parse
from DomainMapper import LatestDomains, IODomains

#TODO
# Add compatibility for multiple Properties (NC, CP, IS)
# Add CP identification in single HSPs
# Print domains in order of the first index in the list

# returns the length of the set Aâˆ©B, can also return an array that includes all intersecting residue indices
def RangeIntersection(range_A, range_B, array = False):
    intersection = set(range_A).intersection(range_B)
    length = len(intersection)
    if not array:
        return length
    else:
        return length, intersection

# mark_for_deletion is a global variable
def eliminate_overlapping_domains(idx, eval, overlap_map):
        if mark_for_deletion[idx]:
            return

        # save all idx and eval for residues with which the reference domain overlaps with
        tmp_idx = [idx]
        tmp_eval = [eval]
        for i,overlap in enumerate(overlap_map):
            if overlap and not mark_for_deletion[i]: # skips over i=idx since that always maps to 0
                F_grp_ol, eval_ol = potential_domain_mappings[i][0:2]
                tmp_idx.append(i)
                tmp_eval.append(eval_ol)
        
        # check if the reference domain is the best fit for it's sequence coverage, if not check if any of the overlaping domains are... 
        min_eval_idx = tmp_idx[tmp_eval.index(min(tmp_eval))]
        if  min_eval_idx == idx:
            for j in tmp_idx:
                if j != idx:
                    mark_for_deletion[j] = 1
            return
        else:
            eliminate_overlapping_domains(min_eval_idx, eval_ol, overlap_logic_array[min_eval_idx])

descriptionText = """"""
argparser = argparse.ArgumentParser(description=descriptionText)

argparser.add_argument('-f', type=str, default='NULL', help='Input path to file from \'hmmscan\'')
argparser.add_argument('-o', type=str, default='NULL', help='Output path for mapped domains')
argparser.add_argument('--ecod_domains', default='NULL', type=str, help='Path to ECOD \'Latest Domains\' text file  (default = file is automatically downloaded [165 MB Free Space Required (deleted after parsing)] [2 MB File Saved])')
argparser.add_argument('--gap', '--domain_gap_tolerance', type=int, default=40, help='Optional gap size between HMM domain sequence and fasta aligment  (default = 40)')
argparser.add_argument('--overlap', '--domain_overlap_tolerance', type=int, default=15, help='Optional overlap between HMM domain sequence and fasta aligment in consecutive or split domains  (default = 15)')
argparser.add_argument('--eval_cutoff', type=float, default=1e-5, help='Optional upper bound tolerance of the E-value  (default = 1e-5)')
argparser.add_argument('--update', help='Update ECOD \'Latest Domains\'', default=False, action="store_true")

args = argparser.parse_args()

if len(sys.argv) < 1:
    IODomains.ErrorMsg("No Arguments Passed. View help page with \'DomainMapper.py -h\'.")

if args.f == 'NULL':
    IODomains.ErrorMsg("No Input hmmscan file provided. View help page with \'DomainMapper.py -h\'")

if args.o == 'NULL':
    IODomains.ErrorMsg("No Output path provided. View help page with \'DomainMapper.py -h\'")


if args.ecod_domains == 'NULL':
    if args.update:
        LatestDomains.update()
    ecod_domain_dict = LatestDomains.load()
else:
    ecod_domain_dict = LatestDomains.load(args.ecod_domains)

if args.gap < 0:
    IODomains.ErrorMsg("Non-positive option detected for gap size tolerance. Please ensure all numerical arguments are positive numbers. View help page with \'DomainMapper.py -h\'")

if args.overlap < 0:
    IODomains.ErrorMsg("Non-positive option detected for overlap tolerance. Please ensure all numerical arguments are positive numbers. View help page with \'DomainMapper.py -h\'")

if args.eval_cutoff < 0:
    IODomains.ErrorMsg("Non-positive option detected for E-value cuttoff. Please ensure all numerical arguments are positive numbers. View help page with \'DomainMapper.py -h\'")


# Non-contiguous domain counter
NC_domain_cnt = 0

# Circular Permutant domain counter
CP_domain_cnt = 0

# Interveneing domain counter
IS_domain_cnt = 0

# Total domain counter
Tot_domain_cnt = 0

output_lines = list()

hmmscan = parse(args.f,'hmmer3-text')
for p_idx, protein in enumerate(hmmscan):
    accession = protein.id
    potential_domain_mappings = list()

    for hit in protein.hits:
        # Single sequence alignment hit
        if len(hit.hsps) == 1:
            query_range = list(range(hit.hsps[0].query_start, hit.hsps[0].query_end))
            hmm_range = list(range(hit.hsps[0].hit_start, hit.hsps[0].hit_end))
            evalue = hit.hsps[0].evalue_cond
            F_group = hit.hsps[0].hit_id
            query_property = list()

            # Checking for gap in the alignment in the hmm vs the query (particular protein sequence)
            if abs(len(query_range) - len(hmm_range)) > args.gap:
                alignment = hit.hsps[0].aln
                alignment_gap = re.search('\.{'+str(args.gap)+',}', str(alignment[1].seq))
                
                # Finding the range of the gap in the alignment
                # Matching the hmm hit range start/end index to the alignment sequence start/end index
                if abs(len(query_range) - len(hmm_range)) > args.gap:
                    alignment = hsp.aln
                    query_aln = alignment[0]
                    hmm_aln = alignment[1]
                    
                    alignment_gap = re.finditer('\.{'+str(args.gap)+',}', str(hmm_aln.seq))
                    
                    # Finding the range of the gap in the alignment
                    # Matching the hmm hit range start/end index to the alignment sequence start/end index
                    if alignment_gap:
                        aln_range = []
                        all_gap_range = []
                        for gap in alignment_gap:
                            gap_start_aln_index = gap.start()
                            gap_end_aln_index = gap.end()
                            gap_start_query_index = gap_start_aln_index + query_range[0] - len(re.findall('-',str(query_aln.seq[:gap_start_aln_index])))
                            gap_end_query_index = gap_end_aln_index + query_range[0] - len(re.findall('-',str(query_aln.seq[:gap_start_aln_index])))
                            all_gap_range += list(range(gap_start_query_index, gap_end_query_index))
                            
                            #remove the gap from the range, so that it doesn't hog up those resi's (there may be another domain inside)
                            aln_range = [x for x in query_range if x not in all_gap_range]

                    if aln_range:
                        query_property.append("NC")
                        query_range = aln_range
            
            # Keep if the E-value is lower than the cutoff
            if evalue < args.eval_cutoff:
                potential_domain_mappings.append([F_group, evalue, query_range, hmm_range, query_property])
        
        # Multiple sequence alignment hits
        # There is potential for these to be non-contiguous, circular permutants, or insertional domains
        if len(hit.hsps) > 1:
            potential_noncontig_domains = list()
            for hsp in hit.hsps:
                query_range = list(range(hsp.query_start, hsp.query_end))
                hmm_range = list(range(hsp.hit_start, hsp.hit_end))
                evalue = hsp.evalue_cond
                F_group = hsp.hit_id
                query_property = list()

                # Checking for gap in the alignment in the hmm vs the query (particular protein sequence)
                if abs(len(query_range) - len(hmm_range)) > args.gap:
                    alignment = hsp.aln
                    query_aln = alignment[0]
                    hmm_aln = alignment[1]
                    
                    alignment_gap = re.finditer('\.{'+str(args.gap)+',}', str(hmm_aln.seq))
                    
                    # Finding the range of the gap in the alignment
                    # Matching the hmm hit range start/end index to the alignment sequence start/end index
                    if alignment_gap:
                        aln_range = []
                        all_gap_range = []
                        for gap in alignment_gap:
                            gap_start_aln_index = gap.start()
                            gap_end_aln_index = gap.end()
                            gap_start_query_index = gap_start_aln_index + query_range[0] - len(re.findall('-',str(query_aln.seq[:gap_start_aln_index])))
                            gap_end_query_index = gap_end_aln_index + query_range[0] - len(re.findall('-',str(query_aln.seq[:gap_start_aln_index])))
                            all_gap_range += list(range(gap_start_query_index, gap_end_query_index))
                            
                            #remove the gap from the range, so that it doesn't hog up those resi's (there may be another domain inside)
                            aln_range = [x for x in query_range if x not in all_gap_range]

                    if aln_range:
                        # NC label is added below
                        query_range = aln_range


                # This is a relaxed cut-off, since it could benefit by 'joining' to  more confident fragment,
                if evalue < 1e-2:
                    potential_noncontig_domains.append([F_group, evalue, query_range, hmm_range, query_property])

            # check if any domains must be combined into non-contiguous domains and find circular permutants
            # checking only unique pairs 
            # By referencing domain_A from [:-1] (all but the last) and domain_B from [a+1:] (from index one more than "A" to the end)
            # we are guaranteed to only check unique pairs of domans against each other.
            # DomA = domains[:-1]
            # DomB = domains[a+1:], where "a" is the starting index of DomA
            # legend: x - excluded,  o - included
            #      \  DomBâ†’
            #       \ 0   1   2   3   4   5
            # DomAâ†“ 0â”‚x   o   o   o   o   o
            #       1â”‚x   x   o   o   o   o
            #       2â”‚x   x   x   o   o   o
            #       3â”‚x   x   x   x   o   o
            #       4â”‚x   x   x   x   x   o
            #       5â”‚x   x   x   x   x   x

            # In a non-contiguous domain, what happens is that the various AA-ranges correspond to distinct portions in the query sequence and in the HMM model
            if len(potential_noncontig_domains) > 1:
                for a,domain_A in enumerate(potential_noncontig_domains[:-1]):
                    for b,domain_B in enumerate(potential_noncontig_domains[a+1:]):
                        
                        F_grp_A, eval_A, query_rng_A, hmm_rng_A = domain_A[0:4]
                        F_grp_B, eval_B, query_rng_B, hmm_rng_B = domain_B[0:4]

                        # If this is a non-contiguous domain, combine them
                        if RangeIntersection(query_rng_A,query_rng_B) < args.overlap and RangeIntersection(hmm_rng_A,hmm_rng_B) < args.overlap and F_grp_A != 'null' and F_grp_B != 'null':

                            if abs(query_rng_A[-1] - query_rng_B[0]) > args.overlap:
                                potential_noncontig_domains[b+a+1][4].append('NC')
                            
                            if (query_rng_A[0] < query_rng_B[0] and hmm_rng_A[0] > hmm_rng_B[0]) or (query_rng_A[0] > query_rng_B[0] and hmm_rng_A[0] < hmm_rng_B[0]):
                                potential_noncontig_domains[b+a+1][4].append('CP')
                            
                            # If the ranges in the query are close across the same HMM match, consider it one domain
                            if abs(query_rng_A[-1] - query_rng_B[0]) < args.overlap:
                                for x in range(query_rng_A[-1], query_rng_B[0]):
                                    if x not in query_rng_A:
                                        query_rng_A.append(x)

                            potential_noncontig_domains[a] = ['null',1,[],[]]
                            potential_noncontig_domains[b+a+1][1] = min(eval_A, eval_B)
                            potential_noncontig_domains[b+a+1][2] = query_rng_A + query_rng_B
                            potential_noncontig_domains[b+a+1][3] = hmm_rng_A + hmm_rng_B

            # Remove any domains with low E-values
            for pot_nc_dom in potential_noncontig_domains:
                F_group, eval = pot_nc_dom[0:2]

                if F_group != 'null' and eval < args.eval_cutoff:
                    potential_domain_mappings.append(pot_nc_dom)

    # Mark all overlapping domains
    mapped_domains = []
    overlap_logic_array = [[0 for i in range(len(potential_domain_mappings))] for j in range(len(potential_domain_mappings))]
    for a,domain_A in enumerate(potential_domain_mappings[:-1]):
        for b,domain_B in enumerate(potential_domain_mappings[a+1:]):
            F_grp_A, eval_A, query_rng_A, hmm_rng_A = domain_A[0:4]
            F_grp_B, eval_B, query_rng_B, hmm_rng_B = domain_B[0:4]
            
            # If there's more than 15 (default) residues of overlap, there might be a conflict
            if RangeIntersection(query_rng_A,query_rng_B) > args.overlap:
                
                # Here we check for situtations were a domain might overlap by <=15 residues on each side of other domains, allowing for "feathering" of domains.
                # This could be bugged for any domains under twice the overlap length
                if RangeIntersection(query_rng_A,query_rng_B) <= 2*args.overlap:
                    mid_rng_idx_B = len(query_rng_B)//2
                    # More than 15 residue overlaps on either side of a domain and it wil be marked overlapping
                    if RangeIntersection(query_rng_A,query_rng_B[:mid_rng_idx_B]) > args.overlap or RangeIntersection(query_rng_A,query_rng_B[mid_rng_idx_B:]) > args.overlap:
                        overlap_logic_array[a][b+a+1] = 1
                        
                # More than twice the overlap tolerance and it will be marked overlapping
                else:
                    overlap_logic_array[a][b+a+1] = 1

    # Recursively check all overlap maps and mark those with poor overlap and high E-vlaues for deletion
    mark_for_deletion = [0 for i in range(len(potential_domain_mappings))]
    for a,dom_overlap_map in enumerate(overlap_logic_array):
        F_grp_A, eval_A = potential_domain_mappings[a][0:2]
        eliminate_overlapping_domains(a,eval_A,dom_overlap_map)

    # Deleting
    for a,delete in enumerate(mark_for_deletion):
        if delete:
            potential_domain_mappings[a] = ['null',1,[],[]]

    # Counting domains
    for pot_dom_map in potential_domain_mappings:
        F_group, eval = pot_dom_map[0:2]
        if F_group != 'null' and eval < args.eval_cutoff:
            # Count the total number of NC and CP domains after filtering
            try:
                dom_prop = pot_dom_map[4][0]
                if 'NC' in dom_prop:
                    NC_domain_cnt += 1
                if 'CP' in dom_prop:
                    CP_domain_cnt += 1
            except IndexError:
                pass

            mapped_domains.append(pot_dom_map)
    
    # Label the intervening domains (domains that lie within non-contiguous domains)
    for a,domain_A in enumerate(mapped_domains):
        for b,domain_B in enumerate(mapped_domains):
            F_grp_A, eval_A, query_rng_A, hmm_rng_A = domain_A[0:4]
            F_grp_B, eval_B, query_rng_B, hmm_rng_B = domain_B[0:4]

            # Check if domain B resides within domain A
            # First, create the set of all 'missing residues' in A
            alignment_gap_A = [x for x in range(query_rng_A[0],query_rng_A[-1]) if x not in query_rng_A] 
            num_res_B_in_aln_gap_A = RangeIntersection(alignment_gap_A,query_rng_B)

            # Then, if all of B's residues (with 15 (default) allowed as exception) lie within a gap of A mark as IS of that domain
            if num_res_B_in_aln_gap_A > len(query_rng_B) - args.overlap: 
                mapped_domains[b][4].append(' IS-'+str(a))
                IS_domain_cnt += 1

    #Now just output this to a file
    for a,domain in enumerate(mapped_domains):
        #reformat the residue range into a nice tidy little string
        F_group, eval, query_range, hmm_range, domain_properties = domain[:]

        start = query_range[0] 
        residue_range_as_string = str(start+1)  #the +1 is an artifact caused by BioPython re-indexing 1 to 0.
        for i in range(1,len(query_range)):
            if query_range[i] == query_range[i-1] + 1:
                pass #they're consecutive
            else:
                residue_range_as_string += ('-{},{}').format(str(query_range[i-1]+1), str(query_range[i]+1)) #Again, +1's is because of BioPython indexing
        residue_range_as_string += ('-{}').format(str(query_range[-1]+1))
        
        #try to find the domain in the domain dict else output the F group from the hmmscan
        if F_group in ecod_domain_dict.keys():
            f_id = ecod_domain_dict[F_group][0]
            arch = ecod_domain_dict[F_group][1]
            x_group = ecod_domain_dict[F_group][2]
            t_group = ecod_domain_dict[F_group][3]
            output_lines.append(('{}\t'*9).format(accession, str(eval), residue_range_as_string, ''.join(str(s) for s in domain_properties), arch, x_group, t_group, F_group, f_id)+'\n')
        else:
            output_lines.append(('{}\t'*9).format(accession, str(eval), residue_range_as_string, ''.join(str(s) for s in domain_properties), "N/A", "N/A", "N/A", F_group, "N/A")+'\n')
        
        Tot_domain_cnt += 1 # yes I know taking the len of mapped_domains is fast but this shows future readers of this code where we are taking final count

with open(args.o, 'w') as mapped_domains_file:
    mapped_domains_file.write(
        IODomains.FileHeader(datetime.now(), args.f, args.o, args.gap, args.overlap, args.eval_cutoff, Tot_domain_cnt, NC_domain_cnt, CP_domain_cnt, IS_domain_cnt))

    for line in output_lines:
        mapped_domains_file.write(line)
